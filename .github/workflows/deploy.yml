name: Deploy on EC2

on:
   push:
      branches: ['main']
   pull_request:
      branches: ['main']

jobs:
   deploy:
      runs-on: ubuntu-latest

      steps:
         - uses: actions/checkout@v3

         # configure SSH
         - name: Configure SSH
           env:
              SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
           run: |
              mkdir -p ~/.ssh
              echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
              ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

         # deploy to EC2 using Docker Compose
         - name: Deploy to EC2 with Docker Compose
           env:
              EC2_HOST: ${{ secrets.EC2_HOST }}
              EC2_USER: ${{ secrets.EC2_USER }}
           run: |
              # Create deployment directory
              ssh $EC2_USER@$EC2_HOST "mkdir -p ~/app"

              # Copy files to EC2 instance
              rsync -avz \
                --exclude='.git' \
                --exclude='node_modules' \
                --exclude='.github' \
                . $EC2_USER@$EC2_HOST:~/app/

              # SSH into EC2, pull the latest Docker image and run with Docker Compose
              ssh $EC2_USER@$EC2_HOST << 'EOF'
                # navigate to the app directory
                cd ~/app
                # get the app envs
                echo "${{ secrets.APP_ENVS }}" > .env

                # ensure Docker and Docker Compose are installed
                if ! command -v docker &> /dev/null; then
                    echo "Docker not found, installing Docker..."
                    sudo apt-get update
                    sudo apt-get install -y docker.io
                    sudo systemctl start docker
                    sudo systemctl enable docker
                fi

                if ! command -v docker-compose &> /dev/null; then
                    echo "Docker Compose not found, installing Docker Compose..."
                    sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose
                fi

                #build and run the app using Docker Compose
                sudo docker-compose down

                # Remove all containers, images, and volumes
                sudo docker system prune -af
                sudo docker volume prune -f
                sudo docker network prune -f
                sudo docker rmi $(docker images -q) -f
                
                # run up tge app containers
                sudo docker-compose up -d --build
              EOF
