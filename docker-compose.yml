version: '3.8'

services:
   postgres:
      image: postgres:latest
      container_name: reel-postgres
      restart: always
      environment:
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: 541990
         POSTGRES_DB: reelsdb
      ports:
         - '5431:5432'
      networks:
         - app-network
      volumes:
         - postgres_data:/var/lib/postgresql/data
      healthcheck:
         test: ['CMD-SHELL', 'pg_isready -U postgres']
         interval: 10s
         timeout: 5s
         retries: 5

   # minio:
   #    image: quay.io/minio/minio
   #    container_name: minio1
   #    restart: always
   #    environment:
   #       MINIO_ROOT_USER: 'mizan'
   #       MINIO_ROOT_PASSWORD: 'mizanmahi'
   #    ports:
   #       - '9000:9000'
   #       - '9001:9001'
   #    volumes:
   #       - minio_data:/data
   #    command: ['server', '/data', '--console-address', ':9001']
   #    networks:
   #       - app-network
   #    healthcheck:
   #       test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
   #       interval: 10s
   #       timeout: 5s
   #       retries: 10

   redis-stack:
      image: redis/redis-stack:latest
      container_name: redis-stack
      restart: always
      ports:
         - '6379:6379'
         - '8001:8001'
      networks:
         - app-network
      healthcheck:
         test: ['CMD', 'redis-cli', 'ping']
         interval: 5s
         timeout: 5s
         retries: 5

   # prometheus:
   #    image: prom/prometheus:latest
   #    container_name: prometheus
   #    restart: always
   #    volumes:
   #       - ./prometheus.yml:/etc/prometheus/prometheus.yml # need to match the path of the prometheus.yml file for scraping
   #    ports:
   #       - '9090:9090'
   #    networks:
   #       - app-network

   # grafana:
   #    image: grafana/grafana:latest
   #    container_name: grafana
   #    restart: always
   #    ports:
   #       - '3000:3000'
   #    volumes:
   #       - grafana_data:/var/lib/grafana
   #    networks:
   #       - app-network
   #    depends_on:
   #       - prometheus

   application:
      build: .
      container_name: reelserver
      depends_on:
         postgres:
            condition: service_healthy
         # minio:
         #    condition: service_healthy
         redis-stack:
            condition: service_healthy
         # prometheus:
         #    condition: service_started
      environment:
         DATABASE_URL: 'postgresql://postgres:541990@postgres:5432/reelsdb?schema=public'
         MINIO_ROOT_USER: 'mizan'
         MINIO_ROOT_PASSWORD: 'mizanmahi'
         REDIS_HOST: 'redis-stack'
         REDIS_PORT: '6379'
      ports:
         - '5000:5000'
      networks:
         - app-network
      volumes:
         - .:/reelserver
         - /reelserver/node_modules # Prevents overwriting node_modules
      command:
         ['sh', '-c', 'yarn install && yarn migrate && yarn build && yarn dev']

networks:
   app-network:

volumes:
   postgres_data:
   minio_data:
   # grafana_data:
